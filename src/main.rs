// src/main.rs

use colored::*;
use indicatif::{ProgressBar, ProgressStyle};
use serde::Deserialize;
use std::process::{Command, Stdio};
use std::io::{BufRead, BufReader};

// –û–±—ä—è–≤–ª—è–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
mod modules;
use modules::llm_interface::LLMInterface;
use modules::web_agent::WebAgent;

// --- –°–¢–†–£–ö–¢–£–†–´ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê JSON –û–¢ CARGO ---
// –≠—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–Ω—ã–º–∏, —á—Ç–æ–±—ã `serde` –º–æ–≥ —É—Å–ø–µ—à–Ω–æ
// –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç—ã –æ—Ç `cargo build`.

#[derive(Debug, Deserialize)]
struct CargoMessage {
    reason: String,
    message: Option<CompilerMessage>,
}

#[derive(Debug, Deserialize)]
struct CompilerMessage {
    message: String,
    level: String,
    code: Option<ErrorCode>,
    spans: Vec<Span>,
}

#[derive(Debug, Deserialize)]
struct ErrorCode {
    code: String,
}

#[derive(Debug, Deserialize)]
struct Span {
    file_name: String,
    line_start: usize,
    #[serde(default)] // –ò—Å–ø–æ–ª—å–∑—É–µ–º default, –µ—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    suggested_replacement: Option<String>,
}

// --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("{}", "üöÄ RustyFixerAI v0.1.0 - Initializing...".bold().yellow());

    // --- –®–ê–ì 1: –ó–ê–ü–£–°–ö –°–ë–û–†–ö–ò –ò –ü–û–ò–°–ö –û–®–ò–ë–û–ö ---
    let spinner = create_spinner("Running initial `cargo build`...");
    let build_errors = run_cargo_build()?;
    spinner.finish_and_clear();

    if build_errors.is_empty() {
        println!("{}", "‚úÖ Build successful! No errors to fix.".green());
        return Ok(());
    }
    
    println!("{}", format!("‚ùå Build failed. Found {} error(s).", build_errors.len()).red());
    
    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–ø–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é)
    if let Some(first_error) = build_errors.first() {
        println!("{}", "\n--- Analyzing First Error ---".bold().cyan());
        display_error_details(first_error);

        // --- –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –û–®–ò–ë–ö–ò –° –ü–û–ú–û–©–¨–Æ LLM ---
        let llm_spinner = create_spinner("Asking local LLM to analyze the error...");
        let llm = LLMInterface::new();
        let analysis_plan = llm.analyze_error(&first_error.message).await?;
        llm_spinner.finish_with_message("LLM analysis complete.");

        println!("{}", "\n--- Autonomous Action Plan ---".bold().cyan());
        println!("- {}: {}", "Summary".bold(), analysis_plan.error_summary);
        println!("- {}: {}", "Search Keywords".bold(), analysis_plan.search_keywords);

        // --- –®–ê–ì 3: –°–ë–û–† –ö–û–ù–¢–ï–ö–°–¢–ê –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê ---
        let web_spinner = create_spinner("Deploying Web Agent to gather context...");
        let agent = WebAgent::new();
        let web_context = agent.investigate(&analysis_plan.search_keywords).await?;
        web_spinner.finish_with_message("Web Agent investigation complete.");
        
        if web_context.is_empty() {
            println!("{}", "Web Agent could not find relevant context.".yellow());
        } else {
            println!("{}", "\n--- Collected Web Context (first 500 chars) ---".bold().cyan());
            // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            let snippet: String = web_context.chars().take(500).collect();
            println!("{}...", snippet);
        }
    }

    println!("{}", "\n[NEXT STEP] Generating a code fix... (Implementation pending)".yellow());

    Ok(())
}

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç `cargo build` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.
fn run_cargo_build() -> Result<Vec<CompilerMessage>, std::io::Error> {
    let mut child = Command::new("cargo")
        .arg("build")
        .arg("--message-format=json")
        .stdout(Stdio::piped())
        .stderr(Stdio::piped())
        .spawn()?;

    let stdout = child.stdout.take().expect("Failed to open stdout");
    let reader = BufReader::new(stdout);
    let mut errors = Vec::new();

    for line in reader.lines() {
        if let Ok(line_content) = line {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è JSON-–æ–±—ä–µ–∫—Ç–∞–º–∏
            if !line_content.starts_with('{') {
                continue;
            }
            if let Ok(msg) = serde_json::from_str::<CargoMessage>(&line_content) {
                if msg.reason == "compiler-message" {
                    if let Some(compiler_msg) = msg.message {
                        if compiler_msg.level == "error" {
                            errors.push(compiler_msg);
                        }
                    }
                }
            }
        }
    }
    child.wait()?;
    Ok(errors)
}

/// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
fn display_error_details(error: &CompilerMessage) {
    println!("- {}: {}", "Message".bold(), error.message);
    if let Some(code) = &error.code {
        println!("- {}: {}", "Error Code".bold(), code.code);
    }
    if let Some(span) = error.spans.first() {
        println!("- {}: {}", "File".bold(), span.file_name);
        println!("- {}: {}", "Line".bold(), span.line_start);
    }
}

/// –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π, —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–ø–∏–Ω–Ω–µ—Ä–∞.
fn create_spinner(msg: &str) -> ProgressBar {
    let spinner = ProgressBar::new_spinner();
    spinner.enable_steady_tick(std::time::Duration::from_millis(120));
    spinner.set_style(
        ProgressStyle::with_template("{spinner:.blue} {msg}")
            .unwrap()
            .tick_strings(&["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]),
    );
    spinner.set_message(msg.to_string());
    spinner
}